# T&F - ESLint configuration

# Docs: https://eslint.org/docs/user-guide/configuring
# Rules: https://eslint.org/docs/rules/

---
parser: espree
env:
  amd: false
  browser: false
  es6: true
  jasmine: false
  jquery: false
  meteor: false
  mocha: false
  node: false
  phantomjs: false
  prototypejs: false
  shelljs: false
rules:
  # Possible Errors.
  # These rules relate to possible syntax or logic errors in JS code:
  for-direction: 1 # enforce “for” loop update clause moving the counter in the right direction.
  # getter-return: 0 # enforce return statements in getters
  # no-await-in-loop: 0 # disallow await inside of loops
  no-compare-neg-zero: 2 #disallow comparing against -0
  no-cond-assign: 2 # disallow assignment operators in conditional expressions
  # no-console: 0 # disallow the use of console
  no-constant-condition: 2 # disallow constant expressions in conditions
  no-control-regex: 1 # disallow control characters in regular expressions#
  no-debugger: 2 # disallow the use of debugger
  no-dupe-args: 2 # disallow duplicate arguments in function definitions
  no-dupe-keys: 2 # disallow duplicate keys in object literals
  no-duplicate-case: 2 # disallow duplicate case labels
  no-empty: 1 # disallow empty block statements
  no-empty-character-class: 2 # disallow empty character classes in regular expressions
  no-ex-assign: 2 # disallow reassigning exceptions in catch clauses
  no-extra-boolean-cast: 1 # disallow unnecessary boolean casts
  no-extra-parens: 1 # disallow unnecessary parentheses
  no-extra-semi: 2 # disallow unnecessary semicolons
  no-func-assign: 1 # disallow reassigning function declarations
  no-inner-declarations: 2 # disallow variable or function declarations in nested blocks
  no-invalid-regexp: 2 # disallow invalid regular expression strings in RegExp constructors
  no-irregular-whitespace: 1 # disallow irregular whitespace outside of strings and comments
  no-obj-calls: 2 # disallow calling global object properties as functions
  no-prototype-builtins: 1 # disallow calling some Object.prototype methods directly on objects
  no-regex-spaces: 2 # disallow multiple spaces in regular expressions
  no-sparse-arrays: 2 # disallow sparse arrays
  no-template-curly-in-string: 1 # disallow template literal placeholder syntax in regular strings
  no-unexpected-multiline: 1 # disallow confusing multiline expressions
  no-unreachable: 2 # disallow unreachable code after return, throw, continue, and break statements
  no-unsafe-finally: 2 # disallow control flow statements in finally blocks
  no-unsafe-negation: 1 # disallow negating the left operand of relational operators
  use-isnan: 2 # require calls to isNaN() when checking for NaN
  # valid-jsdoc: 0 # enforce valid JSDoc comments
  valid-typeof: 2 # enforce comparing typeof expressions against valid strings

  #Best Practices
  #These rules relate to better ways of doing things to help you avoid problems:
  accessor-pairs: 2 # enforce getter and setter pairs in objects
  array-callback-return: 1 # enforce return statements in callbacks of array methods
  block-scoped-var: 2 # enforce the use of variables within the scope they are defined
  class-methods-use-this: 1 # enforce that class methods utilize this
  # complexity: 1 # enforce a maximum cyclomatic complexity allowed in a program
  consistent-return: 1 # require return statements to either always or never specify values
  curly: 1 # enforce consistent brace style for all control statements
  default-case: 2 # require default cases in switch statements
  # dot-location: 0 # enforce consistent newlines before and after dots
  dot-notation: 1 # enforce dot notation whenever possible
  eqeqeq: 2 # require the use of === and !==
  guard-for-in: 1 # require for-in loops to include an if statement
  no-alert: 1 # disallow the use of alert, confirm, and prompt
  no-caller: 2 # disallow the use of arguments.caller or arguments.callee
  no-case-declarations: 1 # disallow lexical declarations in case clauses
  no-div-regex: 2 # disallow division operators explicitly at the beginning of regular expressions
  no-else-return: 1 # disallow else blocks after return statements in if statements
  no-empty-function: 1 # disallow empty functions
  # no-empty-pattern: # disallow empty destructuring patterns
  no-eq-null: 2 # disallow null comparisons without type-checking operators
  no-eval: 2 # disallow the use of eval()
  no-extend-native: 2 # disallow extending native types
  no-extra-bind: 1 # disallow unnecessary calls to .bind()
  # no-extra-label: # disallow unnecessary labels
  no-fallthrough: 2 # disallow fallthrough of case statements
  no-floating-decimal: 2 # disallow leading or trailing decimal points in numeric literals
  no-global-assign: 1 # disallow assignments to native objects or read-only global variables
  no-implicit-coercion: 1 # disallow shorthand type conversions
  # no-implicit-globals: 1 # disallow variable and function declarations in the global scope
  no-implied-eval: 2 # disallow the use of eval()-like methods
  no-invalid-this: 2 # disallow this keywords outside of classes or class-like objects
  no-iterator: 2 # disallow the use of the __iterator__ property
  # no-labels: # disallow labeled statements
  no-lone-blocks: 2 # disallow unnecessary nested blocks
  no-loop-func: 2 # disallow function declarations and expressions inside loop statements
  # no-magic-numbers: # disallow magic numbers
  no-multi-spaces: 1 # disallow multiple spaces
  no-multi-str: 1 # disallow multiline strings
  no-new: 2 # disallow new operators outside of assignments or comparisons
  no-new-func: 2 # disallow new operators with the Function object
  no-new-wrappers: 2 # disallow new operators with the String, Number, and Boolean objects
  no-octal: 2 # disallow octal literals
  no-octal-escape: 2 # disallow octal escape sequences in string literals
  no-param-reassign: 1 # disallow reassigning function parameters
  no-proto: 2 # disallow the use of the __proto__ property
  no-redeclare: 1 # disallow variable redeclaration
  # no-restricted-properties: # disallow certain properties on certain objects
  no-return-assign: 2 # disallow assignment operators in return statements
  # no-return-await: # disallow unnecessary return await
  no-script-url: 2 # disallow javascript: urls
  no-self-assign: 2 # disallow assignments where both sides are exactly the same
  no-self-compare: 2 # disallow comparisons where both sides are exactly the same
  no-sequences: 2 # disallow comma operators
  no-throw-literal: 2 # disallow throwing literals as exceptions
  # no-unmodified-loop-condition: # disallow unmodified loop conditions
  no-unused-expressions: 1 # disallow unused expressions
  no-unused-labels: 1 # disallow unused labels
  no-useless-call: 1 # disallow unnecessary calls to .call() and .apply()
  no-useless-concat: 1 # disallow unnecessary concatenation of literals or template literals
  no-useless-escape: 1 # disallow unnecessary escape characters
  no-useless-return: 1 # disallow redundant return statements
  no-void: 1 # disallow void operators
  # no-warning-comments: # disallow specified warning terms in comments
  no-with: 2 # disallow with statements
  # prefer-promise-reject-errors: # require using Error objects as Promise rejection reasons
  # radix: 1 # enforce the consistent use of the radix argument when using parseInt()
  require-await: 1 # disallow async functions which have no await expression
  vars-on-top: 1 # require var declarations be placed at the top of their containing scope
  wrap-iife: 2 # require parentheses around immediate function invocations
  yoda: 1 # require or disallow “Yoda” conditions

  # Strict Mode
  # These rules relate to strict mode directives:
  strict: 1 # require or disallow strict mode directives

  # Variables
  # These rules relate to variable declarations:
  # init-declarations: # require or disallow initialization in variable declarations
  # no-catch-shadow: 1 # disallow catch clause parameters from shadowing variables in the outer scope
  no-delete-var: 2 # disallow deleting variables
  no-label-var: 2 # disallow labels that share a name with a variable
  # no-restricted-globals: # disallow specified global variables
  no-shadow: 1 # disallow variable declarations from shadowing variables declared in the outer scope
  no-shadow-restricted-names: 2 # disallow identifiers from shadowing restricted names
  # no-undef: # disallow the use of undeclared variables unless mentioned in /*global */ comments
  no-undef-init: 2 # disallow initializing variables to undefined
  no-undefined: 2 # disallow the use of undefined as an identifier
  no-unused-vars: 1 # disallow unused variables
  no-use-before-define: 2 # disallow the use of variables before they are defined

  # Node.js and CommonJS
  # These rules relate to code running in Node.js, or in browsers with CommonJS:
  # callback-return: # require return statements after callbacks
  # global-require: # require require() calls to be placed at top-level module scope
  # handle-callback-err: # require error handling in callbacks
  # no-buffer-constructor: # disallow use of the Buffer() constructor
  # no-mixed-requires: # disallow require calls to be mixed with regular variable declarations
  # no-new-require: # disallow new operators with calls to require
  # no-path-concat: # disallow string concatenation with __dirname and __filename
  # no-process-env: # disallow the use of process.env
  # no-process-exit: # disallow the use of process.exit()
  # no-restricted-modules: # disallow specified modules when loaded by require
  # no-sync: # disallow synchronous methods

  # Stylistic Issues
  # These rules relate to style guidelines, and are therefore quite subjective:
  # array-bracket-newline: # enforce linebreaks after opening and before closing array brackets
  # array-bracket-spacing: # enforce consistent spacing inside array brackets
  # array-element-newline: # enforce line breaks after each array element
  block-spacing: 1 # disallow or enforce spaces inside of blocks after opening block and before closing block
  brace-style: 1 # enforce consistent brace style for blocks
  camelcase: 1 # enforce camelcase naming convention
  # capitalized-comments: # enforce or disallow capitalization of the first letter of a comment
  comma-dangle: 1 # require or disallow trailing commas
  comma-spacing: 1 # enforce consistent spacing before and after commas
  comma-style: 1 # enforce consistent comma style
  # computed-property-spacing: # enforce consistent spacing inside computed property brackets
  consistent-this: 1 # enforce consistent naming when capturing the current execution context
  # eol-last: # require or disallow newline at the end of files
  # func-call-spacing: # require or disallow spacing between function identifiers and their invocations
  # func-name-matching: # require function names to match the name of the variable or property to which they are assigned
  # func-names: # require or disallow named function expressions
  # func-style: # enforce the consistent use of either function declarations or expressions
  # function-paren-newline: # enforce consistent line breaks inside function parentheses
  # !! id-blacklist: # disallow specified identifiers
  id-length: # enforce minimum and maximum identifier lengths
    - 1
    - "max": 25
  # id-match: # require identifiers to match a specified regular expression
  # implicit-arrow-linebreak: # enforce the location of arrow function bodies
  # indent: # enforce consistent indentation
  # jsx-quotes: # enforce the consistent use of either double or single quotes in JSX attributes
  key-spacing: 1 # enforce consistent spacing between keys and values in object literal properties
  keyword-spacing: 1 # enforce consistent spacing before and after keywords
  # line-comment-position: # enforce position of line comments
  # linebreak-style: 1 # enforce consistent linebreak style
  # lines-around-comment: # require empty lines around comments
  lines-between-class-members: 1 # require or disallow an empty line between class members
  # max-depth: # enforce a maximum depth that blocks can be nested
  max-len: # enforce a maximum line length
    - 1
    - "code": 80
  # max-lines: # enforce a maximum number of lines per file
  # max-nested-callbacks: # enforce a maximum depth that callbacks can be nested
  # max-params: # enforce a maximum number of parameters in function definitions
  # max-statements: # enforce a maximum number of statements allowed in function blocks
  max-statements-per-line: # enforce a maximum number of statements allowed per line
    - 1
    - "max": 1
  # multiline-comment-style: # enforce a particular style for multiline comments
  # multiline-ternary: # enforce newlines between operands of ternary expressions
  new-cap: 1 # require constructor names to begin with a capital letter
  # new-parens: # require parentheses when invoking a constructor with no arguments
  # newline-per-chained-call: # require a newline after each call in a method chain
  no-array-constructor: 1 # disallow Array constructors
  no-bitwise: 2 # disallow bitwise operators
  no-continue: 1 # disallow continue statements
  # no-inline-comments: # disallow inline comments after code
  # no-lonely-if: # disallow if statements as the only statement in else blocks
  # no-mixed-operators: # disallow mixed binary operators
  no-mixed-spaces-and-tabs: 1 # disallow mixed spaces and tabs for indentation
  no-multi-assign: 2 # disallow use of chained assignment expressions
  no-multiple-empty-lines: # disallow multiple empty lines
    - 1
    - "max": 2
  # no-negated-condition: # disallow negated conditions
  no-nested-ternary: 2 # disallow nested ternary expressions
  no-new-object: 1 # disallow Object constructors
  # no-plusplus: # disallow the unary operators ++ and --
  # no-restricted-syntax: # disallow specified syntax
  # no-tabs: # disallow all tabs
  # no-ternary: # disallow ternary operators
  no-trailing-spaces: 1 # disallow trailing whitespace at the end of lines
  # no-underscore-dangle: # disallow dangling underscores in identifiers
  # no-unneeded-ternary: # disallow ternary operators when simpler alternatives exist
  no-whitespace-before-property: 1 # disallow whitespace before properties
  # nonblock-statement-body-position: # enforce the location of single-line statements
  # object-curly-newline: # enforce consistent line breaks inside braces
  # object-curly-spacing: # enforce consistent spacing inside braces
  object-property-newline: 1 # enforce placing object properties on separate lines
  # one-var: # enforce variables to be declared either together or separately in functions
  # one-var-declaration-per-line: # require or disallow newlines around variable declarations
  # operator-assignment: # require or disallow assignment operator shorthand where possible
  # operator-linebreak: # enforce consistent linebreak style for operators
  # padded-blocks: # require or disallow padding within blocks
  # padding-line-between-statements: # require or disallow padding lines between statements
  quote-props: 1 # require quotes around object literal property names
  # quotes: # enforce the consistent use of either backticks, double, or single quotes
  # require-jsdoc: # require JSDoc comments
  semi: 1 # require or disallow semicolons instead of ASI
  semi-spacing: 1 # enforce consistent spacing before and after semicolons
  semi-style: 1 # enforce location of semicolons
  # sort-keys: # require object keys to be sorted
  # sort-vars: # require variables within the same declaration block to be sorted
  # space-before-blocks: # enforce consistent spacing before blocks
  # space-before-function-paren: # enforce consistent spacing before function definition opening parenthesis
  # space-in-parens: # enforce consistent spacing inside parentheses
  space-infix-ops: 1 # require spacing around infix operators
  # space-unary-ops: # enforce consistent spacing before or after unary operators
  spaced-comment: 1 # enforce consistent spacing after the // or /* in a comment
  switch-colon-spacing: 1 # enforce spacing around colons of switch statements
  # template-tag-spacing: # require or disallow spacing between template tags and their literals
  # unicode-bom: # require or disallow Unicode byte order mark (BOM)
  wrap-regex: 1 # require parenthesis around regex literals

  # ECMAScript 6
  # These rules relate to ES6, also known as ES2015:
  arrow-body-style: 1 # require braces around arrow function bodies
  arrow-parens: 1 # require parentheses around arrow function arguments
  arrow-spacing: 1 # enforce consistent spacing before and after the arrow in arrow functions
  # constructor-super: # require super() calls in constructors
  # generator-star-spacing: # enforce consistent spacing around * operators in generator functions
  # no-class-assign: # disallow reassigning class members
  no-confusing-arrow: 2 # disallow arrow functions where they could be confused with comparisons
  no-const-assign: 2 # disallow reassigning const variables
  no-dupe-class-members: 2 # disallow duplicate class members
  no-duplicate-imports: 2 # disallow duplicate module imports
  no-new-symbol: 2 # disallow new operators with the Symbol object
  # no-restricted-imports: # disallow specified modules when loaded by import
  # no-this-before-super: # disallow this/super before calling super() in constructors
  no-useless-computed-key: 1 # disallow unnecessary computed property keys in object literals
  no-useless-constructor: 1 # disallow unnecessary constructors
  no-useless-rename: 1 # disallow renaming import, export, and destructured assignments to the same name
  # no-var: # require let or const instead of var
  # object-shorthand: # require or disallow method and property shorthand syntax for object literals
  # prefer-arrow-callback: # require using arrow functions for callbacks
  prefer-const: 1 # require const declarations for variables that are never reassigned after declared
  # prefer-destructuring: # require destructuring from arrays and/or objects
  # prefer-numeric-literals: # disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
  # prefer-rest-params: # require rest parameters instead of arguments
  prefer-spread: 1 # require spread operators instead of .apply()
  prefer-template: 1 # require template literals instead of string concatenation
  # require-yield: # require generator functions to contain yield
  # rest-spread-spacing: # enforce spacing between rest and spread operators and their expressions
  # sort-imports: # enforce sorted import declarations within modules
  symbol-description: 1 # require symbol descriptions
  # template-curly-spacing: # require or disallow spacing around embedded expressions of template strings
  # yield-star-spacing: # require or disallow spacing around the * in yield* expressions
